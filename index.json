{
  "articles/howto/acc_balance.html": {
    "href": "articles/howto/acc_balance.html",
    "title": "Accumulated balance set up",
    "keywords": "Accumulated balance set up Accumulated balance is an exceptionally useful feature for users who would like to define and run balances for the specified fields. The balance calculations are automatically updated, thus no user intervention is required to get the actual state of the values. This tutorial displays how to create an accumulated balance sheet from scratch. To begin with, let us create the database that we can run for our little imaginary electronics shop. The basic database tables list for such undertaking implies the availability of the following tables: Customers and Employees – the tables that keep records of our customers and employees, as well as Products table that lists the electronic items we sell. These auxiliary tables do not take part in our calculations. The rest two tables named In and Out are the main tables that we use to debit incoming goods and to issue invoices to our customers. The In table keeps the daily records of the electronics supplied to our storage. Whereas the Out table maintains the list of the invoices issued to our customers by the employees. In such scenario, the supply of electronic devices to our shop and their subsequent selling are the two processes that run separately. This means we can have difficulties with the calculation of products in stock and cannot easily define the list of currently available devices. This is the case when the accumulated balance feature comes in handy. The next steps will describe the process of adding the accumulated balance feature to our database in order to keep track of the items available in stock. 1.Add a new accumulated balance by tapping on the Plus icon in the upper right corner of the instrument panel. 2.Specify the accumulated balance name and tap OK to confirm. 3.To configure the accumulated balance, tap on the Open configurator option. 4.Then, tap Open structure editor to run it. 5.The accumulated balance structure consists of two field types. The detail fields that specify the fields we would like to run the balance for and the aggregation fields that display the data itself. 6.Set the detail field name to Product and specify the field type. In most cases, the Auto type will be the reasonable choice. In case you made a mistake or would like to modify/delete the existing detail field simply tap on the options menu icon to the right of the field and select either Edit or Delete . The same is true for the aggregation fields. 7.Set the aggregation field name to Availability and tap OK to confirm. This is how your accumulated balance structure should look like. After the balance structure is created, we have to configure the settings by running the Configurator . 8.Tap on the Plus button to add the data source to our balance. 9.As data source we should specify In.Items nested table that contains the actual number of devices supplied to our storage for the entire period. 10.Now, set the Product field from the In.Items nested table as the detail field value. 11.Then specify the Quantity field as the aggregation field value. The active green plus sign to the left of the data source signals that the data from this source will be added to our balance. The next step is to add the Out table data to our balance that will be subtracted from the In table data. 12.Tap on the plus icon once again to add the Out table data source. 13.Set the Out.Items list table that lists the devices invoiced by the employees as the data source for Out table. Then specify the Product and Quantity fields accordingly. The active red minus sign to the left of the Out.Items list data source signals that the data from this source will be subtracted from our balance. Eventually, the configured balance should look like this. 14.Tap on the check mark on the instrument panel to exit the configurator and save the accumulated balance. The figure below displays the newly created Stock balance that lists the devices from our storage and counts the number of devices left in stock. As seen, some of the devices are out of stock, which is proved by the 0 value in the Availability column. In some cases this information may look quite redundant and can be excluded by using the appropriate filter. 15.To configure the filter tap on the Filter icon in the instrument panel. 16.Set the filter parameters as specified below and tap OK to confirm the changes. As a result, our balance lists only those devices that are currently available in stock. The database used in this sample is available under the following link: http://perpetuumsoft.com/Support/downloads/mobidb/Electronics_shop_sample.zip"
  },
  "articles/howto/shortcut_links.html": {
    "href": "articles/howto/shortcut_links.html",
    "title": "Shortcut creation",
    "keywords": "Shortcut creation To quickly access the database or database tables the shortcut links can be used. Creating a shortcut to the database a) Open the MobiDB database list menu and tap on the context menu icon of the database. b) Select 'Create shortcut' from the list of available options. c) The shortcut icon will be created and placed on the device main screen. d) Tap on the shortcut icon to quickly access the database tables. Creating a shortcut to the database table a) Open the database table and tap on the database menu icon. b) Select 'Create shortcut' from the list of available options. c) On the appeared 'Shortcut settings' window, select the preferred initial view, and set the shortcut title. d) In case the 'Cards' view is selected, it becomes possible to specify the option to add a new record to the database table while opening it using a shortcut. When done, press 'OK' to confirm the selection. e) The table shortcut icon will be created and placed on the device main screen. f) Tap on the table shortcut icon to quickly access the database table record."
  },
  "articles/howto/database_dup.html": {
    "href": "articles/howto/database_dup.html",
    "title": "Duplicate database structure",
    "keywords": "Duplicate database structure To duplicate the database structure, please follow the steps given below. 1) Tap on the database menu icon and select Export template option 2) Set the template name and tap Save button to confirm. 3) To import the template, tap + ( plus sign) icon in the lower right corner of the database list window and select Create database option from the popped up options list. 4) Tap on the options icon in the upper right corner and select Import template . 5) Specify the template name and tap OK to confirm. 6) The imported template is now available in the database templates list and can be used to duplicate the database structure."
  },
  "articles/localizeUI.html": {
    "href": "articles/localizeUI.html",
    "title": "User interface localization",
    "keywords": "User interface localization To localize MobiDB user interface please follow the steps given below (works in Windows 10 only): 1) Go to Control Panel > Clock, Language and Region > Language 2) Select the language you would like to be used as MobiDB interface language and move it to the top of the list by clicking on 'Move up' button 3) Run the MobiDB app to see whether the UI was localized correctly. In case the UI language was not changed, then most probably the selected language is not yet available for localization."
  },
  "index.html": {
    "href": "index.html",
    "title": "",
    "keywords": ""
  },
  "articles/howto/calculate_age.html": {
    "href": "articles/howto/calculate_age.html",
    "title": "How to calculate age in MobiDB database",
    "keywords": "How to calculate age in MobiDB database Based on the following link you need to add calculable expression in the designer. Add the following expression called diff : getyear(getnow())-getyear(birthday) And add the following expression to the calculable field: if (birthday>AddYears(getdate(getnow()),-diff),diff-1,diff) Example can be found here ."
  },
  "articles/howto/app_version.html": {
    "href": "articles/howto/app_version.html",
    "title": "How to find out App version",
    "keywords": "How to find out App version Open hamburger menu Choose App Settings option in the navigation Menu Scroll down to the version info:"
  },
  "articles/howto/kitkat.html": {
    "href": "articles/howto/kitkat.html",
    "title": "Android 4.4 SD Card workaround",
    "keywords": "Android 4.4 SD Card workaround Unfortunately, since Android 4.4 (KitKat), apps cannot store data on the SD Card like they used to. Android apps can still read SD card data, but they can only write data to their own dedicated folder. If you would like to save and store your data on SD Card, make sure you created the following folder structure on your SD card and specify it as a path to save your data to: Android/data/com.perpetuumsoft.mobidb (if you are using a full MobiDB version) Android/data/com.perpetuumsoft.mobidb.lite (if you are using a Lite version)"
  },
  "articles/howto/save_filters.html": {
    "href": "articles/howto/save_filters.html",
    "title": "Saved filters",
    "keywords": "Saved filters The following article displays how to save the filter for further use within a table. 1) Tap on the main menu icon and select Saved filters from the Table settings options 2) Tap on the + (plus sign) button to add a new filter 3) Set the filter name and press OK to confirm. 4) Tap on the + (plus sign) button in the corner to specify the filter settings. 5) After the filter settings for the column are set, press OK to confirm the changes. 6) Then, press the tick mark in the upper right corner to save the filter. 7) To select the saved filter click Filtering option from the column Sort and filter menu 8) Tap on the filter selection icon to view the available filters 9) Select the filter by tapping on it and press OK to confirm filter selection. 10) Then press Apply to use the filter. 11) The filter is applied and the filtered values are displayed."
  },
  "articles/licensing/grant_license.html": {
    "href": "articles/licensing/grant_license.html",
    "title": "Grant licenses",
    "keywords": "Grant licenses MobiDB licensing model introduces a number of license types to choose from. Please refer to the following article for details: Licensing. Another type of license that the user can find helpful in certain situations is the ‘license pack’ subscription that can be directly purchased from our web site http://mobidb.mobi . The license packs consist of a number of licenses that can be freely shared among users by the license pack owner. The license pack can only contain the licenses of one type. The license pack owner can manage the licenses by using the “Manage licenses’ option in the account management section. The license sharing process is quite simple and intuitive. To share the license a license pack owner simply types in a user’s email address into the email field to invite the user for collaboration and press ‘Add’ button for confirmation. In this case, the total number of available licenses will be decreased by one license. After the user is added to the users list, the invitation email is sent to user’s email. The emailed invitation letter provides the user with details on how to start using MobiDB app and how to access the user login form. It also contains the credentials required to sign in. The license pack owner can freely revoke the license from the user by selecting the user in the list and pressing ‘Remove user’ button. In this case, the revoked license will be counted as not allocated and added to the total number of available licenses. To download MobiDB app to your device, please use the links specified below: Android app: https://play.google.com/store/apps/details?id=com.perpetuumsoft.mobidb.lite Windows Store app: https://www.microsoft.com/store/apps/9nblggh4nx97"
  },
  "articles/licensing/login.html": {
    "href": "articles/licensing/login.html",
    "title": "Login to MobiDB",
    "keywords": "Login to MobiDB Note Google and Microsoft login use OAuth authorization and in that case we do not store and don't have access to your password in our system. We just redirect you to their login forms and they later confirm that you are logged in and give us your email address and your name which are used on our side to track customer's license. Sign-in experience is a little bit different on different platforms. You can find description for both cases below: iOS Open MobiDB app and tap on user button: Choose Sign-in: Sign in using available options: Android Open MobiDB Android and hamburger button: Tap on the profile area: Choose Sign-in option: You will see login screen: Windows 10 Open MobiDB for windows 10 and open hamburger menu: Open account menu: Choose Sign in option: You will see login screen:"
  },
  "articles/licensing/licensing.html": {
    "href": "articles/licensing/licensing.html",
    "title": "Licensing and registration",
    "keywords": "Licensing and registration MobiDB Database uses web-based account management service to authorize users, get free 14-days trial and manage license packs. MobiDB uses yearly subsriptions. Moreover license packs with 10 and 100 users are available. You can find pricing and features details here . Managing license packs is described here . All data transferred between the remote server and MobiDB client is protected with https connection (SSL certificate). Registering account Account button is situated in different places on Android and Windows: Android 1) Tap on the Account icon and select Register option Windows Open hamburger menu (Step 1). Click on Account toggle button (Step 2): Click on Register button: Registration options For convenience purposes you can use OAuth authorization through Google account and Microsoft account: Note Google and Microsoft login use OAuth authorization and in that case we do not store and don't have access to your password in our system. We just redirect you to their login forms and they later confirm that you are logged in and give us your email address and your name which are used on our side to track customer's license. It's also possible to create mobidb account using third option Create account where you will have to fill in several fields: The specified e-mail address and password will be used as login/password pair when a user signs in to his personal account. After the account is created, the Premium account features are activated for 7 days from the moment of account registration completion. This allows a user to test our software out and experience the same power and flexibility as commercial users. The 7-day Premium trial license grants access to a full-featured, fully functional version of MobiDB which is exactly the same product that can be purchased later. After the Premium trial period expires the subscription will be automatically changed to ‘Free‘ version, thus limiting the functionality of the Premium features. After the user registers a MobiDB account the account data can be used on all scope of user devices operating either under Android or Windows systems. In such scenario the license information is retrieved from the remote server, thus no license installation is required on any of the user devices. The following apps can work under a single MobiDB user account: Windows version available through Windows Store at https://www.microsoft.com/store/apps/9nblggh4nx97 Android version available through Google Play Store at https://play.google.com/store/apps/details?id=com.perpetuumsoft.mobidb.lite Tip To make use of the databases on either of user devices the data should be synced through cloud service. Please be advised, the cloud service synchronization feature is only available in full product version or during the 7-day product trial period. More info regarding sync can be found here ."
  },
  "articles/licensing/forgot_password.html": {
    "href": "articles/licensing/forgot_password.html",
    "title": "I forgot my password",
    "keywords": "I forgot my password In order to change password which you don't remember open account menu: Choose Sign In option. You'll see login screen. Tap on I forgot my password link. Specify recovery email: And hit OK. Check you mail box: Click on restore password link . You will see the following screen: And finally you will get email with new password:"
  },
  "articles/import_export/import_access.html": {
    "href": "articles/import_export/import_access.html",
    "title": "Import data from MS Access",
    "keywords": "Import data from MS Access In order to import Microsoft Access data table to MobiDB application, the following steps should be performed. 1.Select External Data tab in MS Access, then click Export TextFile button on the ribbon panel. 2.Specify the destination file name and format. By default, MS Access uses .txt file name extension, that should be changed to .csv . Go to the next step by pressing OK button. 3.In Export Text Wizard check to make sure the Delimited option is selected ( which is set by default) and press Advanced button to modify the settings. 4.Select comma sign (,) as Field Delimiter and specify UTF-8 encoding to be used for exported data. Then press OK button to confirm changes. 5.Press Next to proceed. 6.Check to make sure Include Field Names on First Row option is selected. Then press Finish button to complete export process. 7.The .csv file is created under the file system path specified in step 2. Press Close button to exit. 8.Copy the created .csv file to your Android device if you want to use Mobidb for android for import. Follow instructions written in csv import article ."
  },
  "articles/import_export/import_with_images.html": {
    "href": "articles/import_export/import_with_images.html",
    "title": "Import with images, attached files",
    "keywords": "Import with images, attached files Warning Currently only Android app supports csv import with images. In order to import data with images/files we've added additional functionality to CSV import. In order to import with images csv file should contain column with images path, for example: Name, Position, **Photo , Birth date, Phone, Email, About, Skype Sarah Jones, Sales Manager, Employees_images/53a867af54a5418ca17de2168b18ab74.jpeg , 1/25/1983,407-555-5963,sarahjones@gmail.com, \"Hobbies: yoga & stretching, reading, travelling (Europe, South America) Has 2 daughters (Lisa, 2004 and Marie, 2008). Likes big cars and small dogs. \", Sarah.Jones James Morrison, Financial director, Employees_images/23bcb076175d4048b171d69737e5decc.jpeg , 3/2/1971, 407-555-6314, jmorrison@gmail.com, \"Hobbies: golf, squash, swimming, travelling. His wife is a famous stylist. His son Robert studies in Harward. Likes sportcars (BMW)\", J.Morrison ... In the folder where csv file reside should be Employees_images folder with files specified in csv: Now you can use csv import to import data with images: You can also choose File type instead of Picture . Results can be found below:"
  },
  "articles/import_export/csv_import.html": {
    "href": "articles/import_export/csv_import.html",
    "title": "CSV Import (import data from Filemaker, MS Access, MS Excel and etc.)",
    "keywords": "CSV Import (import data from Filemaker, MS Access, MS Excel and etc.) CSV import allows to import data from Filemaker, Microsoft Access, Excel spreadsheet and others products which support csv export. Android Create a new MobiDB database. Specify database name: Create new table by choosing Import CSV option: Press Browse button and select the .csv file to be imported. Make sure Encoding and Delimiter options are specified correctly. Select appropriate encoding from the dropdown. Encoding from drop-down menu. First line contains column names uses first line for the column's title. Specify column types: Press Next to finish importing .csv data. Windows Create new database: Specify database name: Add new table and specify Import CSV option: Press Browse button to choose csv file: Configure Encoding, Delimeter, First line contains column names settings: Specify column types from the list of available types. Note Dropdown lists are filtered according to the values in the column. If you don't see type you want to choose it could be a mistake in csv file or our analyzer didn't work properly. You can contact our support team to investigate the problem. Specify table name: The database is successfully imported, up and running:"
  },
  "README.html": {
    "href": "README.html",
    "title": "MobiDB database documentation is now opensourced",
    "keywords": "MobiDB database documentation is now opensourced Mobidb documentation sources. Edit markdown files and submit pull requests to improve documenation."
  },
  "articles/import_export/pdf_export.html": {
    "href": "articles/import_export/pdf_export.html",
    "title": "PDF export",
    "keywords": "PDF export MobiDB is powerful not only because of designer, but because you can export forms and table to PDF. Android For android platform pdf export is pretty straightforward: Open table you wish to export and press ellipses button: Select Export option from the menu: Then choose Pdf option in the list: You will see pdf export settings dialog: The following settings are available: Common PDF export settings Font - font used by PDF export by default if not explicitly set in the designer. Action after export - allows to add additional export step after saving the file like Send (using apps which support sending files) or Open (to view exported file in apps which are able to display PDF files). It is also possible to just export file without additional step. Note If you don't see text in the result PDF then default font you specified does not support characters you exported. You need to choose another default font or specify text field's font explicitly in the designer. Windows As for Windows there is no need to export PDF in order to get PDF. All you need to do is to print it. Windows 10 finally has default out of the box PDF Printer driver and is capable of creating PDF files. In order to export document to PDF open desired table and press ellipses button: In the menu choose Print option: You'll see Print dialog: As you can see Microsoft Print to PDF driver is selected by default. If not - choose it. The following settings are available: Common PDF export settings . Page range - physical page range to print. Once you hit Print you will see Save dialog: Common Pdf export settings There are several pdf export settings which work the same way for both platforms Android and Windows: Page orientation – sets paper orientation portrait or landscape. Layout – allows to specify which template to use for export: table view or forms view Rows range – sets rows to export: All, Current record, Filtered records. All - ignore filter, export all records. Current record - export only one currently selected record. Filtered rows - If you have active filter it will be used to filter rows). Page size - paper size ( A4 , Letter and etc.). As for layout property Cards layout is demonstrated below: Table layout example is shown below:"
  },
  "articles/troubleshoot/howto_sync_issue.html": {
    "href": "articles/troubleshoot/howto_sync_issue.html",
    "title": "Synchronization troubleshooting",
    "keywords": "Synchronization troubleshooting In order to help troubleshoot cloud synchronization problems we introduced the debugging option that can be activated through application settings. In case you face cloud sync issues on your Windows or Android device, the following steps should be performed: 1) Run MobiDB and select 'Application settings' option from the drawer panel. 2) Enable the 'Synchronization debug mode' by tapping on the checkbox next to the option and press 'OK' to confirm. 3) Select 'Connect to cloud storage database' option to initiate cloud sync. 4) In case the sync process is interrupted by the error message, locate the 'Save log file' button on the screen and press it to save the debug information. The file with the debug information should be sent to support@perpetuumsoft.com in case it was requested by technical support service. Please note, you should deactivate 'Synchronization debug mode' after you finish troubleshooting the problem, since it can noticeably impact the application performance during the cloud synchronization."
  },
  "articles/troubleshoot/howto_extract.html": {
    "href": "articles/troubleshoot/howto_extract.html",
    "title": "Database Extractor tool",
    "keywords": "Database Extractor tool Sometimes, the support team may ask you to extract the MobiDB database files in order to examine the problems that occur on your device. The requested .db files are stored in a private directory of the application and are not directly accessible unless you are using a root account. That's why we recommend using our Databases Extractor tool to extract the database files on a non-rooted device. Please follow the steps below to get the .db files extracted on your device: 1) Download the Databases Extractor tool using the link below: http://perpetuumsoft.com/Support/downloads/Tools/Database_extractor_new.zip Use any available archive tool to unzip the apk installer and install it to your device. 2) Run the Databases Extractor and select the installed MobiDB version 3) Specify the path to save the .db files to.. ..and tap 'Select' button to confirm. If everything was done correctly you will see the following window. 5) Navigate to the file path you specified in step 3 to check the .db files. In case no files were saved to the folder, then most probably you selected the wrong MobiDB version in step 2. Select another MobiDB version and try again."
  },
  "articles/troubleshoot/howto_dbox.html": {
    "href": "articles/troubleshoot/howto_dbox.html",
    "title": "Save data from Dropbox",
    "keywords": "Save data from Dropbox Sometimes, the support team may ask you to provide the contents of your database Dropbox folder in order to examine the synchronization problems that occur on your device. One of the essential conditions is that the requested files should not have the creation timestamp modified and that is why we strongly recommend using the method shown below to preserve the timestamps from being altered. 1) Run your favorite web-browser and type http://dropbox.com in the address bar. Sign in under your Dropbox account and navigate to MobiDB folder. 2) Open MobiDB folder by clicking on it, then click the context menu icon of the database folder and select 'Download' option. This will zip the database folder content into a single file without modifying the files timestamps."
  },
  "articles/synchronization_and_backups/sync.html": {
    "href": "articles/synchronization_and_backups/sync.html",
    "title": "Synchronization set up",
    "keywords": "Synchronization set up Cloud synchronization feature allows you to sync database between devices and even between different users (multi-user synchronization article can be found here ). Sync database to one of the cloud storages with just a couple of clicks. Google Drive, Dropbox or OneDrive sync is currently supported. Important The data sync is performed manually each time you would like to save changes to cloud service. Configuring synchronization To configure synchronization, tap on the database menu icon and select ‘Set up synchronization’ option from the pop-up list. Select one of the available cloud storages and tap \"Next\" to proceed. Specify the database name that can be used to identify the backup copy. Then tap \"Next\" again. The data will start uploading to MobiDB cloud storage folder. If everything is done correctly, you will be notified that the backup copy was created successfully. Tap on \"Exit wizard\" button to finish. To notify whether the database is currently connected to a cloud, the Cloud sync icon is displayed in the bottom left corner of the database icon. Syncing changes Please note that all cloud syncs must be performed manually. To sync the changes it is either possible to select \"Synchronize\" option from the database options menu or tap the 'Sync' icon located in the upper right corner of the database icon. Disconnecting from the cloud In case you would like to disconnect your database from cloud storage, select \"Disconnect from cloud storage\" option from the menu Then check if you would like to remove the database from the storage and press \"OK\" to confirm. The 'Cloud sync' icon will no longer be visible after you disconnect the database from the cloud. Connecting to a database from another device To connect to an existing database stored in the cloud, the following steps should be performed. Tap the 'Plus' icon on the upper panel and select 'Connect to cloud storage database'. Select the cloud storage to connect to and tap \"Next\" to proceed. Select the database in the list, then tap \"Next\". Set the name of the database and tap \"Next\" to start the database download process. After the database is downloaded to your device, the notification window appears. The connected database will be added to the database list available on user's device."
  },
  "articles/synchronization_and_backups/backup_restore.html": {
    "href": "articles/synchronization_and_backups/backup_restore.html",
    "title": "Backup and restore",
    "keywords": "Backup and restore Android Backup In order to backup database open database options and choose backup database: Specify path for the backup and hit SAVE: Restore In order to restore backup hit plus button and choose restore: Specify backup file: Specify database name: Windows Backup In order to backup database open database options and choose backup database: Specify path for the backup: Restore In order to restore backup hit plus button and choose restore: Specify backup file and hit open: Specify db name:"
  },
  "articles/synchronization_and_backups/share_multi.html": {
    "href": "articles/synchronization_and_backups/share_multi.html",
    "title": "Multi-user access",
    "keywords": "Multi-user access This article describes how to share a database and connect to it from other devices. Please note , the synchronization process is not automated and tapping the Synchronize button is required to initiate data sync. To share a database to be accessed by multiple users, you should follow the steps given below. 1) To share a database with other user, open your Dropbox web user interface in any available web browser. Click on MobiDB directory to see the list of databases available for sharing. Select the database you would like to share and press Share button. Let's presume we would like to share a database named Libros . 2) After pressing the Share button, select Invite people to collaborate option. 3) Select the user you would like to share your database with and press Share folder button to proceed. Connecting to a shared database 1) The Shared folder invitation will appear in Dropbox of the user you would like to share your database with. 2) The user should press Accept button to confirm. 3) The Libros database is now linked to the root folder of user's Dropbox file system. 4) To be able to access the database from user's device, it is necessary to move the database to the root MobiDB folder. Right click on the Libros database and select Move . 5) Select MobiDB folder located in the root of your Dropbox file system and press Move to confirm. In case no MobiDB folder is available in the folders' list, it is necessary to create such folder manually and add the Libros database to it. 6) After the Libros database is moved to root MobiDB folder it can be accessed from the user's device. 7) To connect to the shared database on user's device the following steps should be performed: Select Connect to MobiDB Dropbox base from the main menu options list The shared Libros database is now visible in the list of available databases. Select the Libros database to proceed. Specify the name for this database to be displayed on user's device. The Libros database is now connected and can be used in cooperative mode."
  },
  "articles/field_types/calc_time.html": {
    "href": "articles/field_types/calc_time.html",
    "title": "Time difference calculation",
    "keywords": "Time difference calculation Date and time formulas are useful for managing features that are time or date dependent. Two data types are used for working with dates and time in MobiDB: these are Date and Time types. You can use operations like addition or subtraction on Date and Time values to calculate either a future date or elapsed time between two dates. The date value acquired from the Date type field holds only date as such, but during the calculation, if you add a Time type value to a Date type value it is possible to get a combined Date/Time value. The following properties are available when working with Date type: day – returns the day of the month of a given date (21.01.2015 12:01 -> 21) month – returns the month of given date (21.01.2015 12:01 -> 1) year – returns the year of a given date (21.01.2015 12:01 -> 2015) date – returns the date, that does not have a time shift (21.01.2015 12:01 -> 21.01.2015) time – returns the time shift from 0:00 date (21.01.2015 12:01 -> 12:01) The values of Date type do not have any methods. The available operations include: addition to time – results in a date, shifted forward for a given time subtraction of time from date – results in a date, shifted backward for a given time subtraction of date from date – results in a time, elapsed from the subtracted date The following comparison operators are supported: <, >, <=, >= Time type in general is represented by a time interval. When getting the time value from the Time type field the value can fall within 00:00:00 to 23:59:59, but during the expression calculation the result may be more than one day. The following properties are available when working with Time type: days – returns a number of days in a given time interval (1d 12:02:15 -> 1) hours – returns a number of hours in a given time interval (1d 12:02:15 -> 12) minutes – returns a number of minutes in a given time interval (1d 12:02:15 -> 2) seconds – returns a number of seconds in a given time interval (1d 12:02:15 -> 15) totalhours – returns a total number of hours of a given time interval (1d 12:01:15 -> 36) totalminutes – returns a total number of minutes of a given time interval (1d 12:01:15 -> 2161) totalseconds – returns a total number of seconds of a given time interval (1d 12:01:15 -> 129675) The values of the Time type do not have any methods. The available operations for Time type include: unary -, addition to another time interval, subtraction from time interval. Let’s have a look at the sample for better perception. Task. To calculate worktime hours by subtracting date and time values. In this scenario we originally have the following fields in our database: Start date (‘date1’ field) of Date type Start time (‘time1’ field) of Time type End date (‘date2’ field) of Date type End time (‘time2’ field) of Time type To calculate working hours (subtract Start date and time from End date and time ) the following approach can be used: Use days property to get the number of days and multiply the result by 24 to get the number of hours Subtract Start time from End time and use hours property to get the number of hours Add the results from step 1 and 2 to get the total working hours value Example: (date2-date1).days*24+(time2-time1).hours"
  },
  "articles/field_types/nested_table.html": {
    "href": "articles/field_types/nested_table.html",
    "title": "Nested table (one to many relation, master-detail)",
    "keywords": "Nested table (one to many relation, master-detail) Nested table allows to set up one to many relationship like in sample provided below: Let's create order details sample to see how it can be set up. Create blank database: Before we start adding nested table let's add \"product\" table with the following structure: Then create \"orders\" table and open designer: Let's add order date field: Now we are ready to add nested table control: In order to design nested table we need to open designer for it: Now let's add table relation to \"Product\" table. It is not related to our article, for more info take a look at Table relation set up article In order to calculate total we need to take product price and to multiply it by Quantity. Start from adding calculable field: Configure \"total\" calculable formula: In order to get back to parent table design use bread crumbs: Let's configure total column in parent table: For more info regarding total expression take a look at Calculable expressions article Now our nested table is up and running:"
  },
  "articles/field_types/filtered_dropdown.html": {
    "href": "articles/field_types/filtered_dropdown.html",
    "title": "Filtered dropdown lists set up",
    "keywords": "Filtered dropdown lists set up Multi table databases imply the availability of relations between the tables. Relational databases can be quite complex and usually contain hundreds and thousands of records. It would be very convenient to have the ability to filter the selected data on the form when you fill in the card to save time for adding new entries. Here is the use case: you’ve got a little book store and need to quickly create new orders. So, when creating a new order it would be good to select genre (drama, romance, satire, tragedy, comedy, tragicomedy, realistic fiction, non-fiction, etc.) and then see only those authors that are in the category and then select the necessary book of the author from the list. MobiDB Database Designer can do it. This step-by-step tutorial will show you how to do it. Bearing in mind the task described above, our database should contain the following tables: Genres, Authors, Books, and Orders. The database scheme with relations is in the picture below: 1.Let’s start creating the database from the Genres table. This is how it looks in the designer. Here is the table view: 2.Now we need to add the Authors table. It will contain author name and genre the author relates to. Genre will be a Table reference control and we will be able to select it from the dropdown list. More information on creating table relations can be found here. Designer view: Author is a String field type, Genre is the Table Reference field type. Card view: Genre can be selected from the dropdown list. Table view: provides an overview of all authors and genres. Here you can soft and filter, search for authors and genres. 3.Let’s add the Books table. It will contain fields necessary to describe the book including book title, publisher, format, pages, publication date, ISBN, price and author. Author is the Table reference field and we will be able to select the author from the dropdown list. Designer view: Author is the Table reference control. Card view: Selecting author from the dropdown list. Table view: list of all available books. 4.And finally we will add the Orders table that will contain the fields specifying the order including order ID, customer, genre (selected from the dropdown list), author (selected from the dropdown list, will be filtered depending on the selected genre), book (selected from the dropdown list, will be filtered depending on the selected author), quantity, unit price, discount, tax, total. Tips: Adding Genre field: Genre field is a Table reference control. It has the following settings: Adding Author field: Author field is a Table reference control. It has the following settings: Please pay attention to the following properties of the Dependency filter: Current table relation . It sets the relation of fields in the current table. As we want to select the author depending on the selected genre, we need to set the relation to the Genre field. Parent relation control . Determines the relation from the parent table (in this case this is the Authors table) that is used to filter data. So, we use Author – Genre relation from the Authors table to filter the data. Adding Book field: Book field is a Table Reference control. It has the following settings: Please pay attention to the following properties of the Dependency filter: Current table relation. It sets the relation of fields in the current table. As we want to select the book depending on the selected author, we need to set the relation to the Author field. Parent relation control. Determines the relation from the parent table (in this case this is the Books table) that is used to filter data. So, we use Book – Author relation from the Books table to filter the data. Adding Price field: It would be very convenient to show book price automatically (get it from the Book table). It can be done with just one move. Scroll the toolbox down to the Related fields section, select the Price (Book) field and drag and drop it on to the form. The corresponding calculable field with the pre-set expression and caption will be added. You can adjust the other options, if necessary. Adding Total field: Total field is a Calculable control. Here you will add an expression to calculate total cost of the order: price*quantity . Here is how the form looks in the designer: 5.Click the checkmark to save changes and close the designer. So, let’s create a new order. Select the Genre from the list: Select the Author from the list of all authors who write about Art & Photography. Note that only 3 authors are available. Select the Book of the author you chose on the previous step. You will see only books of the selected author in the dropdown list. Price of the selected book will be added automatically. Total order cost will be calculated once you set quantity. This is how you can quickly setup filtered dropdown lists to make it easy to add new entries."
  },
  "articles/field_types/calc_exp.html": {
    "href": "articles/field_types/calc_exp.html",
    "title": "Invisible calculable variables",
    "keywords": "Invisible calculable variables Calculable expressions feature is introduced to minimize the number of calculable fields on the form required to perform specific calculations. To get deeper in detail, let’s see into a simple sample. Let’s assume we have a table that stores the customer first name and last name in separate fields and we have a task to output both first and last name as a single record in customers list within ‘Orders’ table. To achieve this we can use a Calculable Expression in ‘Customer’ table to merge both fields into one. Click/tap on the Calculable Expressions icon located in the upper toolbar to run the Calculable Expressions manager. Set the Expression name and specify the formula that merges customer first and last name into a single value. Exit the Expressions manager window by pressing ‘OK’ to confirm the changes. Then, add the Table reference control to ‘Orders’ table and check to make sure the expression name ‘FLName’ is available as a column for 'Customers' table. Select 'FLName' as the column value and exit the forms designer. Now open the customers dropdown list in ‘Orders’ table to see the customer first and last names displayed as a single value."
  },
  "articles/field_types/basic_types.html": {
    "href": "articles/field_types/basic_types.html",
    "title": "Basic field types and their properties",
    "keywords": "Basic field types and their properties Common control properties There are several properties which works the same for almost all controls (exceptions are \"Nested table\" and Label control): Caption – sets name of a field visible on a form and in the table caption. Caption Format – sets Caption font family, size (in points) and style ( bold , italic , underline ). Name used in formulas – sets name of a field that is used to refer to this field in formulas. Tip We recommend giving meaningful and informative formula names. It will help you select the needed field name when writing expressions. For example, if your field is used to display product description, set name for formulas as product_description . Another common property is \"Default value\", which is available at some controls (it's mentioned if supported): Default value – the value which is used to automatically fill in control when new record is added. Text format defines text format for the textual controls (it's mentioned if supported): Text format - sets text font family, size (in points) and style ( bold , italic ). String String is used to add text values to the database, for example names, products, description, services. Any text information can be added. The following string properties are available: Common properties Default value is supported Enable barcode input – if checked you will be able to scan barcodes to enter values in this field. Text format - sets text font family, size (in points) and style ( bold , italic ). Label Label is used to add text information that is equal for all entries in the database. It can be used to add a caption to the card, so that you are able to see what information you are going to add or edit. You can also use it to name some group of fields: contact information, product details, etc. The following Label properties are available: Text – sets text of a label displayed on a form. Alignment – sets text alignment in the control. (top left, top center, top right, center left, center, center right, bottom left, bottom center, bottom right). Text format – sets text font family, size (in points) and style ( bold , italic , underline ). Float Float is used to enter and display decimal numbers. The following Float properties are available: Common properties Default value is supported Text format - sets text font family, size (in points) and style ( bold , italic ). Integer Integer is used to enter and display integer values. The following Integer properties are available: Common properties Default value is supported Bool Bool (Boolean) is used to add checkboxes to a database. It has two states: checked and unchecked. This field can be edited from both card and table view. The following Bool properties are available: Common properties Default value is supported Date Date is used enter and display dates. A user is able to select some date by selecting it in the date picker. The following Date properties are available: Common properties Default value is supported Set current date as default – if checked sets current date by default or every new entry. Custom format – sets custom date format. It set, for example, in the following manner: dd-MM-yyyy, MM/dd/yyyy, dd.MM.yyyy , etc. “y” – Year, “M” – Month, “d” – Day . The number of letters means the number of figures displayed. Text format - sets text font family, size (in points) and style ( bold , italic ). Time Time is used to enter and display time. A user is able to select time by selecting it in the time picker. The following Time properties are available: Common properties Show seconds – if checked time value shows seconds. Set current time by default – if checked sets current time for every new entry. Text format - sets text font family, size (in points) and style ( bold , italic ). Picture Picture is used to add and display images in a card. Picture can be selected from the gallery or cloud storage , or taken by the device camera . It’s also possible to delete the image from the card or save it outside of the app for further use The following Picture properties are available: Common properties Hyperlink Hyperlink is used to enter and display hyperlinks. The hyperlinks shown on the form is active. By tapping on it users gets to the web browser that opens the specified web page. The following hyperlink properties are available: Common properties Default value is supported Enable barcode input - if checked you will be able scan barcodes to enter values in this field. Text format - sets text font family, size (in points) and style ( bold , italic ). Email Email is used to enter and display emails. Email shown on a form is active. By tapping on it a user gets to an email client and is able to send a message to the selected recipient. The following Email properties are available: Common properties Default value is supported Enable barcode input - if checked you will be able scan barcodes to enter values in this field. Text format - sets text font family, size (in points) and style ( bold , italic ). Phone Phone is used to enter and display phone numbers. Upon pressing the corresponding icon in a card a user is able to dial the number via one of the dialer apps. The following Phone properties are available: Common properties Default value is supported Enable barcode input - if checked you will be able scan barcodes to enter values in this field. Text format - sets text font family, size (in points) and style ( bold , italic ). Rating Rating provides an intuitive rating experience that allows users to select the number of stars that represents their rating. The following Rating properties are available: Common properties Default value is supported Maximum value – sets maximum possible rating value. Step – sets step for increment or decrement of rating. The default step is 1. Text format - sets text font family, size (in points) and style ( bold , italic ). Address Address is used to enter and display physical address information. The following Address properties are available: Common properties Show country – if checked information about country is visible and can be added or edited. Show region – if checked information about region is visible and can be added or edited. Show city – if checked information about city is visible and can be added or edited. Show postal code - if checked information about postal code is visible and can be added or edited. Show address line 1 – if checked address line 1 is visible and can be added or edited. Show address line 2 – if checked address line 2 is visible and can be added or edited. Set current country as default – sets country selected in the Language and Input setting of a device. Text format - sets text font family, size (in points) and style ( bold , italic ). Currency Currency is used to enter and display money units. The following Currency properties are available: Common properties Default value is supported Currency sign – sets sign to denote the currency. Currency sign place – sets if the currency sign should be placed before or after the numeric value. Text format - sets text font family, size (in points) and style ( bold , italic ). Dropdown list Dropdown can be used as a simplified version of the table reference control. It is a replacement for single column table reference. Note Values are not stored in the separate table as in table reference control, they are stored as is inside the column. It also doesn't reset when value is removed from the list. The following Dropdown list properties are available: Common properties Sort values – if checked indicates if the entries should be sorted. Value list – a simple list editor for values available in the dropdown. It's possible to access list editor not only from the form designer but during filling in values in the form view. Text format - sets text font family, size (in points) and style ( bold , italic ). Table reference Table reference is used to add relation to the other table in the database. It is used when you need to show some data from the other table in the designed card. It’s also used to avoid duplicate entries and saves time on filling in a card. A user is able to proceed to the related table entry by tapping the corresponding icon in a card, edit some information and get back to the table he was working with. The following Table Reference properties are available: Common properties Table – allows selecting a table to refer to from the list of all tables in the database. Column – allows selecting a column to refer to from a list of all columns of the table selected on a previous step. Sort values – if checked indicates if the entries should be sorted. Text format - sets text font family, size (in points) and style ( bold , italic ). Dependency filter - allows to filter combobox values based on another combobox. Can be used when cascade grouping is used. More detailed explanation is available in the following article . Current table relation - specifies combobox of the current form which is used for filtering purposes. Parent relation controls - links filtering combobox with combobox from parent table. In order to filter there should be the same table relation to the same table in current table as well as in parent table. By linking them we filter current relation and show only values which corresponds to \"current table relation\" More information regarding this control can be found in the following article . Calculable Calculable is used display data that is a result of some expression calculation. More information on available functions and fields that can be used in formulas is available in the following article . The following Calculable properties are available: Common properties Expression – sets formula that needs to be calculated to display the value in this field. Format – sets format of the calculated value. If a user selects some value different from “None” additional options become available. It’s offered to select Number or Percentage Format . Decimal numbers allows to specify number of decimal places to use for number format. Prefix – will add some data before the calculated value (for example currency sign). Postfix – will add some data after the calculated value (for example currency sign). Presentation – sets type of the calculated value. The default value type is Text. (Can be: Text, Checkbox, Hyperlink, Email, Phone, Picture, File). Location Location is used to enter and display coordinates of a place. Coordinates can be entered manually in the following format: 53.389175;83.745387 , or you can get your current coordinates with GPS and add them to a card Users are also able to view the place specified by the entered coordinates on the map The following Location properties are available: Common properties Text format - sets text font family, size (in points) and style ( bold , italic ). Marker expression - sets formula for the text used in the marker's popup message on the map. Nested table Nested table is used to insert a child table into the card. This is very convenient for storing additional data that is related to a definite entry but adding it to the card would overload it and make unreadable. The following Nested table properties are available: Common properties Show as link – if checked a nested table will be represented by a hyperlink. Columns settings – provides access to the list of columns where a user can manage columns visibility and order. Nested table layout and columns are created and managed in the same manner as the parent table. Users can access nested table designer in two ways: by tapping the icon in the designer. Attached file Attached file control allows to add file (blob) data to the database. It could be documents (pdf, docx, xlsx) and any other file types. Note Files are stored inside the database. They are not a link to the file in the file system. When you attach file it's copied to the database. The following Attached file properties are available: Common properties Text format - sets text font family, size (in points) and style ( bold , italic ). Related fields In the designer toolbox you will see another group of elements below the described controls. You will see a list of all fields from the related tables referred by field caption. You can simply drag and drop any such field to the form. A calculable control with the pre-set expression will be added and calculable type will be automatically specified. The expression has the following look: client.email , where client is a \"Name to use in formulas\" of the Table relation control that makes reference to the selected table and email is the name of the column (field) in this table. Such fields have all properties of a Calculable field."
  },
  "articles/field_types/use_exp.html": {
    "href": "articles/field_types/use_exp.html",
    "title": "Calculable expressions",
    "keywords": "Calculable expressions Getting the value of the column To get the value of the column it is necessary to use the name specified in a column properties as Name used in formulas . For example, if you would like to multiply the value of the column named in formulas as Price by the value of the column named as Quantity , you can use the following expression: quantity*price About types The typization of expression calculation result is dynamic. The type is defined upon calculation. The type of the operation execution result often depends on the types of arguments, but sometimes also on the values of arguments. For example, the following expression if(marked, sum, \"Not marked\") will return either the value of the sum field or \"Not marked\" string depending on the value of the marked field. The following basic types are available: Boolean String Number Date Time Table reference Nested table Picture The values of all listed types can be compared for equality (=) or inequality (!=) . Types specification Boolean The values of the Boolean type do not have any properties or methods. The following operations can be performed over Boolean type values: NOT, AND, OR The constants of the Boolean type are declared as true or false . String The values of the String type do not have any properties or methods. The strings can be concatenated with the help of + operator. The following comparison operators are supported: <, >, <=, >= The constants of the String type are defined with the help of double quotes: “String” Number The values of the Number type do not have any properties or methods. The following operations are supported: unary -, +, -, *, /, % (remainder of the division) The following comparison operators are supported: <, >, <=, >= The constants of the Number type are defined by the digits. A point (.) is used as a decimal separator. Date The date value acquired from the Date type field holds only date as such, but during the calculation, if you add a Time type value to a Date type value it is possible to get a combined Date/Time value. Properties: day – returns the day of the month of a given date (21.01.2015 12:01 -> 21) month – returns the month of given date (21.01.2015 12:01 -> 1) year – returns the year of a given date (21.01.2015 12:01 -> 2015) date – returns the date, that does not have a time shift (21.01.2015 12:01 -> 21.01.2015) time – returns the time shift from 0:00 date (21.01.2015 12:01 -> 12:01) The values of the Date type do not have any methods. The possible operations: addition to time – results in a date, shifted forward for a given time subtraction of time from date – results in a date, shifted backward for a given time subtraction of date from date – results in a time, elapsed from the subtracted date The following comparison operators are supported: <, >, <=, >= Time In general is represented by a time interval. When getting the time value from the Time type field the value can fall within 00:00:00 to 23:59:59, but during the expression calculation the result may be more than one day. Properties: days – returns a number of days in a given time interval (1d 12:02:15 -> 1) hours – returns a number of hours in a given time interval (1d 12:02:15 -> 12) minutes – returns a number of minutes in a given time interval (1d 12:02:15 -> 2) seconds – returns a number of seconds in a given time interval (1d 12:02:15 -> 15) totalhours – returns a total number of hours of a given time interval (1d 12:01:15 -> 36) totalminutes – returns a total number of minutes of a given time interval (1d 12:01:15 -> 2161) totalseconds – returns a total number of seconds of a given time interval (1d 12:01:15 -> 129675) The values of the Time type do not have any methods. The possible operations: unary -, addition to another time interval, subtraction from time interval Table reference Provides access to table fields through its properties. For example: reference.column1 . No methods are supported. Nested table No properties are available. The following methods are supported: getTotal( , ) – aggregates the value of a given column (passed as a the second argument) with the help of a function specified in the first argument. For example: table.GetTotal(“Sum”, “column1”) The following functions are supported: Sum – a sum Min – a minimum value Max – a maximum value Average – an average value Any – at least one of the logical values is true All – all logical values are true Count – a number of non-zero values as well as the values without logical negation Variance StandardDeviation Picture No methods or properties are available. When comparing pictures, it is assumed that they are not equal by default. Methods common for all types ToString() – converts a value into a string. For example: Column1 = 1 Column2 = 2 Column1 + Column2 will return the integer ‘3’, Column1.ToString() + Column2.ToString() will return the string \"12\" The functions of conditional choice if (condition, value1, value2) – the 1st parameter should be of logical type; the 2nd and the 3rd parameters could be of any type. If the 1st parameter is true, the function returns the 2nd parameter value, otherwise it returns the 3rd parameter value. For example: if(length(column1) > 0, \"Yes\", \"No\") switch (condition[0], value[0], … , value by default) – if the condition[i] is set to true, the function returns the value[i], if the condition[i] in any i is false, the value returns by default. Formatting Functions format (object, mask) , the object is of any type except child table and table reference, the mask is of string type. It returns the object’s string presentation according to the mask. BuildString(format, ) - replaces the format items in a specified string with the string representation of objects. Parameters: format - is a composite format string. Basically, it is represented as a static text with placeholders in specific positions. The placeholder indicates that a string representation of the parameter with a specified index (which starts from ‘0’) should be added to its position. The placeholder format: { } For example: BuildString(\"{0} of {1}\", 1, 10) will return the string \"1 of 10\". Besides, it is possible to use an extended placeholder format: { [, ][: ]} Alignment - is an optional parameter that designates the number of characters allotted for object presentation. If the length of the string presentation is lesser than a specified value, then the remaining space will be filled with blanks to the left (in case alignment >0 ) or to the right (in case alignment <0 ). If the length of the string presentation is greater than the alignment value, then the alignment value will be ignored. Format - the format string placed after \":\" has the same functionality as format function. Arguments list – arguments of various types, converted to String value and inserted at specified position in a format string. Mathematical Functions sin(argument) – calculates the argument sine. The argument is of the numeric type, the calculation result is of the numeric type. cos(argument) – calculates the argument cosine. The argument is of the numeric type, the calculation result is of the numeric type. tan(argument) – calculates the argument tangent. The argument is of the numeric type, the calculation result is of the numeric type. atan(argument) – calculates the argument arctangent. The argument is of the numeric type, the calculation result is of the numeric type. sqr(argument) – calculates the argument to square. The argument is of the numeric type, the calculation result is of the numeric type. sqrt(argument) – calculates the argument‟s square root. The argument is of the numeric type, the calculation result is of the numeric type. log(argument) – calculates the argument‟s natural logarithm. The argument is of the numeric type, the calculation result is of the numeric type. exp(argument) – raise E number to the argument degree. The argument is of the numeric type, the calculation result is of the numeric type. sign(argument) – returns:-1 if the argument is negative, 0 – if the argument is 0, 1 – if the argument is positive. The argument is of the numeric type, the calculation result is of the numeric type. abs(argument) – returns the argument‟s absolute value. The argument is of the numeric type, the calculation result is of the numeric type. round(argument1, argument2) – rounds the 1st argument value to the symbols amount after the comma, assigned by the 2nd argument. The 1st argument is of the double type, the 2nd argument is of the numeric type, the calculation result is of the numeric type. Date & Time Processing Functions getMonth (argument) – returns the month number by the date passed by an argument. getMonthName (argument) – returns the string month name by the date passed by an argument. getNow() - returns the current date. getDayOfWeek (argument) – returns the day of week number by the date passed by an argument. getDayOfWeekName (argument) – returns the string day of week name by the date passed by an argument. getQuarter (argument) – returns the quarter number of a date specified as an argument. addDays (argument, value) - adds days to date. The first argument is a value of date type and the second argument is a number of days specified as numeric value. The result is a new date. addHours (argument, value) - adds hours to date or time. The first argument is a value of date or time type and the second argument is a number of hours specified as a numeric value. The result is a new date or time. addMinutes (argument, value) - adds minutes to date or time. The first argument is a value of date or time type and the second argument is a number of minutes specified as a numeric value. The result is a new date or time. addMonths (argument, value) - adds months to date. The first argument is a value of date type and the second argument is a number of months specified as a numeric value. The result is a new date. addSeconds (argument, value) - adds seconds to date or time. The first argument is a value of date or time type and the second argument is a number of seconds specified as a numeric value. The result is a new date or time. addYears (argument, value) - adds years to date. The first argument is a value of date type and the second argument is a number of years specified as a numeric value. The result is a new date. GetWeekOfYear(weekRule, firstDayOfWeek) – returns the week of the year for the specified weekRule and firstDayOfWeek Parameter: weekRule – a string that defines a rule which is used to designate the first week of the year Values: D (First day) - indicates that the first week of the year starts on the first day of the year and ends before the following designated first day of the week. The value is 0. FWD (First four day week) - indicates that the first week of the year is the first week with four or more days before the designated first day of the week. The value is 2. FW (First full week) - indicates that the first week of the year begins on the first occurrence of the designated first day of the week on or after the first day of the year. The value is 1. Parameter: firstDayOfWeek – the first day of the week Values: MO - Monday, TU - Tuesday, WE - Wednesday, TH - Thursday, FR - Friday, SA - Saturday, SU - Sunday GetWeekOfYear() – returns the week of the year by using weekRule and firstDayOfWeek default values. The value of both parameters may vary on different devices, that’s why it is recommended to explicitly specify the calculation method when calling the function with parameters. For example: column1.GetWeekOfYear(\"D\",\"MO\") String Functions concat (string1, string2) - returns the result of appending one string (string2) to the end of another string (string1) indexOf(string1, string2,[start]) - returns the position of the first occurrence of a specified value in a string; returns -1 if the value to search for never occurs. [start] – Optional parameter. Default 0. At which position to start the search. insert(string,position,subString) - inserts the target string (subString) into the source string (string) at specified (position) length(string) - returns the number of characters in the string padLeft(string,length,char) - adds characters(char) to the left of a string till a certain length is reached padRight(string,length,char) - adds characters(char) to the right of a string till a certain length is reached remove(string,start,length) - eliminates a range of characters in a string to a specified length (length) beginning from the (start) position replace (string, subString, newSubString) - returns a string corresponding to the replacement of a given string with another in the specified string. Input string (string), a string to be replaced (subString), a string to replace all occurrences of substring (newSubString) subString(string,start,length) - returns a substring of the specified string. If the (length) is greater than zero, the function returns a subString starting at character position (start) with a length of (length) characters. If the (length) is equal to zero, the function returns an empty string. Input string (string), position of the start of the substring (start), the length of the substring (length) toLower(string) - returns the specified string converted to lowercase toUpper(string) - returns the specified string converted to uppercase trim(string) - returns the given string trimmed of whitespace trimEnd(string) – returns the given string trimmed of trailing whitespace trimStart(string) - returns the given string trimmed of leading whitespace regIsMatch(string,expressionString) - returns the sign of string matching the regular expression (expressionString) regReplace(string, expressionString, newString) – replaces a substring matching the regular expression (expressionString) in a (string) with a (newString)"
  },
  "articles/field_types/table_rel.html": {
    "href": "articles/field_types/table_rel.html",
    "title": "Table relations set up",
    "keywords": "Table relations set up With MobiDB Database Designer, users can create complex databases with multiple table relations. This article will show how to create table relations and access fields from the related tables. Task: Let’s assume we have two tables: Clients and Invoices . When you generate invoices for your customers you want to select from the list of your customers and automatically fill in the following fields: billing address, contact name, email, phone . How to: Clients table contains the following fields: Company, Email, Contact, Phone, Billing address, Shipping address . Figure1. Table view (phone) Figure 2. Table fields in the designer (phone) We strongly recommend changing field names used in formulas to make them unique and descriptive, so that you are able to easily identify the field when writing expressions. Figure 3. Changing field name to be used in formulas We added a new table – Invoices . And we need to get access to the customers’ data from the Clients table. In the designer, we add a Table reference control to the form. On the phone, tap to proceed to the toolbox containing all available fields: Figure 4. Adding fields from the toolbox (phone) Tap settings icon to get access to the field options. Set field name, caption, select a table you want to link to, then select a field from that table you want to link to. Tap Save . We have just created table relation, so you will be able to select values from the related table in the dropdown list. Figure 5. Setting table relations Now we need to get access to other fields from the Clients table and fill in the values automatically upon selection of the company name. To do that, go back to the designer, tap the Add button (on the phone) or just scroll the toolbox panel on your tablet to view all fields available from the related table – Related fields . Figure 6. Fields available from the related table (phone) Just tap the necessary field (or drag and drop it on the tablet). As a result, you will add the Calculable field with the pre-set expression that will get data from the related table field. Figure 7. Options of the related field In same way add all required fields: Billing address, Contact name, Phone, Email . Tap Ok button to save changes and see the result. Empty fields when no company is selected: Figure 8. Empty fields when no company is selected The card is filled in automatically when the company name is selected: Figure 9. Automatically filled in fields upon selection of the company name It’s also possible to proceed to the parent table by tapping the icon and edit the necessary information. When you get back to the Invoices records, they will be updated to display the most recent data. You can link to any field types including Pictures . So, you see how it is easy to create relations between the tables. Just add the Table reference field and in a couple of taps you get access to the required data. Users don’t need to have any programming experience and write any expressions at all. Everything is done in an intuitive and user-friendly manner."
  },
  "articles/hotkeys.html": {
    "href": "articles/hotkeys.html",
    "title": "Hotkeys",
    "keywords": "Hotkeys Usage of hotkeys will allow you to more quickly execute certain actions while working with MobiDB on Windows platform. The following hotkeys are available: Lists Keyboard arrow keys - navigate through the records Enter - enter a menu or confirm an entered value Escape (Esc) - go up one level Delete (Del) - delete the selected element CTRL+N - add a new element Cards Alt+Left, Alt+Right – navigate left or right through the cards Tab – move to the next field on a form Ctrl+F - open Find function Dialog windows Enter - OK Escape (Esc) - cancel operation Tab - move to the next field"
  },
  "articles/howto.html": {
    "href": "articles/howto.html",
    "title": "This is the main howto page",
    "keywords": "This is the main howto page"
  },
  "articles/index.html": {
    "href": "articles/index.html",
    "title": "Getting started",
    "keywords": "Getting started In this article: iOS Android Windows Cloud sync At times, we need to keep track of information and a good choice for this is using a MobiDB database application. MobiDB is good choice for keeping record of small business. It could be inventory management, keeping records of clients in medical organization, managing sport organizations, managing scientific records. or even a collection of your books and discs, or simply the database to store your personal contacts, a MobiDB makes it easy to enter, store, and find specific information. The following Getting Started guide is meant to describe the basic steps a user should take in order to get acquainted with the application capabilities. iOS Step 1. Creating database To create a database tap on the Add icon at the bottom left corner of the main screen and select Create new database option. The list of predefined templates will appear. To create new empty database choose Blank . Specify Database name and hit OK. The new empty database will be created. Step 2. Creating table To create new table hit button. In the menu choose Add new table . Enter table name and hit OK to confirm: Once you confirm newly created table will be opened. Even though it's still empty. Open designer using Designer option of the ellipses button's menu. Step 3. Creating form layout Form designer will appear. Let's assume we want to create table with the following fields: Product name field of text type; Price field of float type; Picture field of picture type; In order to add fields hit button and select field you want to add. Once you add Text, Float and Picture field move them using drag and drop and change size with size grippers. Let's change fields' titles. In order to do that select element you want to edit and hit Edit button. Property editor will appear. Edit properties, in particular Caption property and hit Save button. Edit the rest of the fields in the similar manner. Hit apply button to save form. Step 4. Editing data You will see Data editor screen. Hit plus button to add new row to the table. There are two options to edit data. When you need to modify one particular cell it's possible to edit value in the table directly. Tap on the cell to select cell. Tap again on the selected field to display menu. Select edit in the menu. Edit data and hit OK to save data to selected cell. If you need to enter lots of data it's better to switch to View and edit entries mode. Use swipe gesture to flip records. Android Step 1. Creating database To create a database tap on the Add icon at the bottom right corner of the databases window and select Create new database option. In database selection window tap on the Blank database icon to create an empty database. Set your Database name and click OK . The new empty database will be created under the default application path. Step 2. Creating table To create a database table, tap on the Add icon in the bottom right corner of the Sample database window and choose Add options which means add new table. Enter table name and press OK to confirm. What you see next is the database designer window that is used for creating or modifying a form layout and table columns at the same time. First you will have specify columns count for the designed table: Once you are done you will see designer canvas. Note: phone designer is a little different from table designer. In order to add control to the phone you need to hit Add button and tap on the control we want to add to the form. As for tablet designer you need to drag and drop data from toolbox: The database designer consists of the Toolbox panel to select the required fields and the working area grid to the right of the Toolbox , where the selected controls will be allocated. The fields can be added to the working area grid by simple drag-and-drop action. Next to Toolbox you can find an Outline tab that represents a descriptive view of controls placed onto the working form. Step 3. Creating form layout Let’s assume we are creating a database that will contain product name, quantity and image fields. Thus, the fields we select for use in our sample would be as follows: String (product name), Integer (quantity), Picture ( product image). After adding the controls to the form we can modify their properties. To do this, select the control in the working area grid by tapping it, and then use an Edit element properties button below the selected table element to open the Edit control properties window. Press Save icon in the upper right corner. All your changes will be saved and you will see the Card view window that is used for filling in your table with data. Step 4. Adding data After finishing filling in the first card, you can add a new record by simply tapping on the Add record icon in the upper right corner of the Card view window. All data added to the table is saved on the fly, that's why there's no need to save the changes during data input phase. Switching between the Card view and the Table view is done with the help of Switch button. Simply tap the Switch icon in the upper right corner to switch to Table view layout, or tap icon to return to Card view . Note: You can increase or decrease the width of any of your fields by tapping the column border in a Table view layout and move it left or right while holding it pressed. Before: After: Step 5. Filtering and sorting data It is possible to filter the table data and sort the output data order. To do this, switch to Table view layout and press the menu icon in a column header. In opened menu you can set sorting order. The available values include None , Ascending and Descending data output order. Clear sorting will reset sorting. Advanced sorting offers setting up sorting by multiple columns. Setting the filter option is performed by selecting a query criterion. If a table value matches the pattern you enter, it appears in the query results. It is possible to set only one query criterion for each individual column at a time. None is the value used by default. Step 6. Application Menu settings The Application Menu is composed of a drop-down button control that displays a menu containing commands that expose additional functionality. The available options depend on the view layout the menu was called from. For example, if the menu was invoked from the Database view layout the available options will be different from options displayed in Tables Collection view or Table/Card view . Below, you can find more detailed description of all commands in alphabetical order. Duplicate record - duplicates the selected record. Edit table view settings - allows changing the order of the table columns and their visibility. To change the column order you will need to tap on the 'four-way arrow' sign and move the column up or down while holding it pressed. Export - offers the ability to export a table to PDF or CSV. Print - offers the ability to print a table. Share - allows saving your database to a DropBox folder. Reset all filters - resets the set filters in the table. Import CSV - imports data to a separate table from a CSV file. Create shortcut - allows to create a shortcut on your home screen tapping on which you will get directly to the certain table. Windows Step 1. Creating database In order to create database on Windows open MobiDB and hit + button at the top toolbar: Choose Add option in the menu: Choose Blank template: Specify database name: Step 2. Creating table You will see list of tables which is yet empty, hit + button at the right of the upper toolbar: Specify table name: Now we are inside our table input screen, but no columns and no forms are yet designed. Open designer: Step 3. Creating form layout Specify designer columns count (10 is a good choice for desktop). Open toolbox in the designer: Use drag and drop to add/move items on the form: Let's design form with Picture, Author, Title fields: Let's change titles for the columns. Choose control and open Properties: Specify titles for the newly added fields: Once we are done hit Save button: Step 4. Adding data Now we have table with three fields and we can add records to it: Hit menu (right button click) on the picture and choose gallery: Choose picture: Click on the Author cell and hit F2 (or use menu as with a picture case), edit text and hit apply: You can also use Form view to input data: Step 5. Filtering and sorting data In order to sort data tap on the table's column header and choose Sort mode: Filtering and table view settings available on the right side: Synchronization The most powerful feature of MobiDB is cloud sync. It's available through Dropbox, OneDrive, Google Drive. Let's assume that we designed our database on the PC and want to access it from android Phone. 1. Upload database to the cloud First thing to do is to upload database to the cloud: Choose cloud provider: Dropbox, OneDrive, Google drive: Allow mobidb to upload db to cloud provider: Specify server's database name (folder with this name will be created): Hit next and we are done: Now you can start syncing and see local changes indicator: 2. Connect from phone Open android app and hit add button: Choose connect to cloud option: Choose cloud provider you specified on the PC: Enter credentials: Wait a bit to read cloud databases list: Choose database you want to connect to: Specify local database name: Database is now successfully downloaded: Now you can see database from the PC on android phone:"
  },
  "articles/form_designer.html": {
    "href": "articles/form_designer.html",
    "title": "Form designer",
    "keywords": "Form designer MobiDB Database Designer offers a convenient visual form designer that helps users create forms (card view of an entry). It opens automatically when you create a new database and add at least one table. You are offered to set designer grid properties, such as number of columns in the grid. This setting allows more precise location of the controls on the form and allows more optimal use of space on a screen. The designer can also be opened from the existing table or card by pressing the corresponding menu item in the navigation panel. This is how designer looks on a tablet: Toolbox Toolbox contains a list of all available fields. A user can add fields onto the form by simple drag-and-drop. Outline Outline contains a list of all fields added to the form. It shows field type and name of a field used in formulas. Designer form Designer form is a working area where all fields are added. A user can change control size and location on a form to achieve an optimal card look and feel. Designer menu This is how designer looks on a phone: Designer form Designer form is a working area where all fields are added. A user can change control size and location on a form to achieve an optimal card look and feel. Designer menu Phone designer menu provides access to the following options: save and exit, table calculable expressions, undo, redo, and more options. Confirm all changes by tapping the icon and proceed to adding entries"
  },
  "articles/EULA.html": {
    "href": "articles/EULA.html",
    "title": "End User License Agreement",
    "keywords": "End User License Agreement End User License Agreement for MobiDB Database Designer Vitaliy Korney MobiDB Database SOFTWARE PRODUCT Copyright (C) 2017 Vitaliy Korney END-USER LICENSE AGREEMENT FOR MOBIDB DATABASE DESIGNER SOFTWARE PRODUCT IMPORTANT - READ CAREFULLY: This Vitaliy Korney End-User License Agreement (\"EULA\") is a legal agreement between you, a user of MobiDB Database Designer (\"End User\") and Vitaliy Korney (\"Vendor\") for MobiDB Database Designer™ SOFTWARE PRODUCT, its relevant controls, printed materials, and \"online\" or electronic documentation (\"PRODUCT\") contained in the installation file. By installing, copying, or otherwise using the PRODUCT, the End User agrees to be bound by the terms of this EULA. If the End User does not agree to any part of the terms of this EULA, THE END USER CAN NOT INSTALL, USE, OR REPLICATE IN ANY MANNER, ANY PART, FILE OR PORTION OF THE PRODUCT, OR USE THIS PRODUCT FOR ANY OTHER PURPOSES. The PRODUCT is licensed, not sold. LICENSE GRANT Upon acceptance of this EULA the Vendor grants the End User a personal, nonexclusive license to install and use the PRODUCT on compatible devices. If the End User is an entity, it must designate one individual within its organization to license the right to use the PRODUCT in the manner provided herein. The End User may install and use the PRODUCT as permitted by the license type purchased. The license type purchased is specified in the product receipt. LIMITED TIME PREMIUM LICENSE Under the terms of a Limited Time Premium License the End User may install and use the PRODUCT on unlimited number of computers for the limited purposes of testing, evaluation and demonstrations ONLY. This License is granted for a limited period of seven (7) days after activation of the Limited Time Premium License of the PRODUCT (\"Evaluation Period\"). After the Evaluation Period, the End User may either (i) use a Free version of the PRODUCT with the limited features, or (ii) purchase one of the paid licensing options of the PRODUCT. DESCRIPTION OF OTHER RIGHTS AND LIMITATIONS Limitations on Reverse Engineering, Decompilation, and Disassembly The End User may not reverse engineer, decompile, create derivative works, modify, translate, or disassemble the PRODUCT. The End User agrees to take all reasonable, legal and appropriate measures to prohibit the illegal dissemination of the PRODUCT or any of its constituent parts to the fullest extent of all applicable local, federal and international laws and treaties regarding anti-circumvention, including but not limited to the Geneva and Berne World Intellectual Property Organization (WIPO) Diplomatic Conferences. RENTAL The End User may not rent, lease, or lend the PRODUCT. TRANSFER The End User may NOT permanently or temporarily transfer ANY of his/her rights under this EULA to any individual or entity. The End User may not reproduce or distribute any PRODUCT documentation without the Vendor explicit permission. SUBSCRIPTION Purchasing the license (s) for the PRODUCT authorizes the End User to get free updates, upgrades and new versions of the PRODUCT till another major version of the app is published (hereinafter referred to as Subscription). After the Subscription expiration the End User is entitled to use the product versions released before the subscription expiration date without any limitations, however the End User is not entitled to get free upgrades, updates and new versions of the PRODUCT released after the subscription expiration date. The End User has the right to upgrade to the latest major version of the PRODUCT and to prolong the subscription service for a successive Subscription period (till the next major version of the app is published), thereby to accrue the right to get free updates, upgrades and new product versions released within the subscription period. COPYRIGHT All title and copyrights in and to the PRODUCT are owned by the Vendor. The PRODUCT is protected by copyright laws and international treaty provisions. Therefore, the End User must treat the PRODUCT like any other copyrighted material. RIGOROUS ENFORCEMENT OF INTELLECTUAL PROPERTY RIGHTS If the licensed right of use for this PRODUCT is purchased by the End User with any intent to reverse engineer, decompile, and the exploitation or unauthorized transfer of any intellectual property and trade secrets of the Vendor, to include any exposed methods or source code where provided, no licensed right of use shall exist. Any sale or resale of intellectual property or created derivatives so obtained will be prosecuted to the fullest extent of all local, federal and international laws. WARRANTY The Vendor represents and warrants that: (i) The Vendor has all rights, authorizations or licenses to provide the PRODUCT to the End User; (ii) The Vendor will use its best efforts to prevent the PRODUCT from being infected with any \"worms\", \"viruses\", \"Trojan horses\" or other programs or programming devices that might be used to modify, delete, damage, deactivate or disable the software, computer hardware or data of the End User; LIMITATION ON AND EXCLUSION OF DAMAGES THE END USER CAN RECOVER FROM THE VENDOR ONLY DIRECT DAMAGES UP TO THE AMOUNT THE DEVELOPER END USER PAID FOR THE SOFTWARE. THE DEVELOPER END USER CANNOT RECOVER ANY OTHER DAMAGES, INCLUDING CONSEQUENTIAL, LOST PROFITS, SPECIAL, INDIRECT, INCIDENTAL OR ANY OTHER DAMAGES. This limitation applies to claims for breach of contract, breach of warranty, guarantee or condition, strict liability, negligence, or other tort to the extent permitted by applicable law. It also applies even if repair, replacement or a refund for the software does not fully compensate the End User for any losses; or the Vendor knew or should have known about the possibility of the damages. DISCLAIMER EXCEPT AS OTHERWISE DEFINED HEREIN, THE VENDOR EXPRESSLY DISCLAIMS ANY WARRANTY FOR THE PRODUCT. THE PRODUCT AND ANY RELATED DOCUMENTATION IS PROVIDED \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, OR NONINFRINGEMENT. THE ENTIRE RISK ARISING OUT OF USE OR PERFORMANCE OF THE PRODUCT REMAINS WITH THE END USER. NO LIABILITIES To the maximum extent permitted by applicable law, in no event shall the Vendor be liable for any special, incidental, indirect, or consequential damages whatsoever (including, without limitation, damages for loss of business profits, business interruption, loss of business information, or any other pecuniary loss) arising out of the use of or inability to use the PRODUCT or the provision of or failure to provide Support Services, even if the Vendor has been advised of the possibility of such damages. SUPPORT SERVICES The Vendor will provide the End User with free support services related to the PRODUCT (\"Support Services\") for the period till the next major version is published. Use of Support Services is governed by the Vendor’s policies and programs described in the user manual, in \"on line\" documentation and/or other Vendor provided materials. With respect to technical information the End User provides to the Vendor as part of the Support Services, The Vendor may use such information for its business purposes, including for PRODUCT support and development. The Vendor will not utilize such technical information in a form that personally identifies the End User. TERMINATION Without prejudice to any other rights or remedies, the Vendor will terminate this EULA upon the failure of the End User to comply with any and all terms and conditions of this EULA. In such events, the End User must destroy all copies of the PRODUCT including any related documentation, and must immediately remove ANY and ALL use of the technology contained in the PRODUCT from any End User’s devices."
  }
}